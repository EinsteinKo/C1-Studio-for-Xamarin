// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using AppKit;
using C1.Mac.CollectionView;
using C1.CollectionView;
using System.Threading.Tasks;
using System.Collections.Generic;

namespace C1CollectionView101
{
	public partial class CustomCellsViewController : NSViewController
	{
		public CustomCellsViewController (IntPtr handle) : base (handle)
		{
		}

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();

            Load();
        }

        private async void Load()
        {
			var videos = await YouTubeCollectionView.LoadVideosAsync("Xamarin.Mac", "relevance", null, 50);
			var source = new CustomTableViewSource(TableView);
            source.AutoGenerateColumns = false;
			source.ItemsSource = videos.Item2;
			await source.CollectionView.GroupAsync("ChannelTitle");
			TableView.Source = source;
        }
    }

    public class CustomTableViewSource : C1TableViewSource
    {
		public CustomTableViewSource(NSTableView tableView) : base(tableView)
		{
		}

		protected override NSView GetItemView(NSTableView tableView, NSTableColumn tableColumn, object item)
        {
            var video = item as YouTubeVideo;
            var cell = tableView.MakeView("CustomCell", this) as NSTableCellView;
            cell.TextField.StringValue = video.Title;
            LoadImageInBackground(cell.ImageView,video.Thumbnail);
            return cell;
        }

        protected override nfloat GetItemRowHeight(NSTableView tableView, nint row)
        {
            return 50;
        }

		#region ** images

		private Dictionary<string, NSImage> _cache = new Dictionary<string, NSImage>();

		static NSImage _placeHolder;

        static NSImage PlaceHolder
		{
			get
			{
				if (_placeHolder == null)
				{
					_placeHolder = new NSImage("Images/default.png");
				}
				return _placeHolder;
			}
		}

		protected async void LoadImageInBackground(NSImageView imageView, string url)
		{
			if (string.IsNullOrWhiteSpace(url))
			{
				imageView.Image = PlaceHolder;
				return;
			}
			NSImage image;
			imageView.Tag = url.GetHashCode();
			if (!_cache.TryGetValue(url, out image))
			{
				imageView.Image = PlaceHolder;
				try
				{
					image = await Task.Run(() => new NSImage(NSData.FromUrl(new NSUrl(url))));
					_cache[url] = image;
				}
				catch { }
			}
			if (imageView.Tag == url.GetHashCode() && image != null)
			{
				imageView.Image = image;
			}
		}

		#endregion

	}
}
